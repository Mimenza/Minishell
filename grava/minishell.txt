Los pseudopasos para hacer la minishell:
1-Leer el input recibido
2-Realizar un historial de los input recibidos
3-Aplicar el analisis lexico
5-Expansion de variables
6-Hacer los built-in
7-Parseo de comandos e infiles y permisos de outfiles
8-Pasar una estructura con el comando y sus fd a pipex

1-Leer el input recibido(funcional sin gestion de errores)
	Bucle infinito utilizando readline para leer la linea
	Contemplar los casos de si no hay archivo de redireccion o el pipe es el primer o ultimo caracter para completar el input (tabla en el drive)


2-Realizar el historial de los input recibidos(funcional solo mientras dure la sesion)
	X Lo primero es tener un archivo donde ir guardando los input de las sesiones anteriores y cargarlo como historial al principio de cada sesion.
	X Por cada input añadir esa linea a algun tipo de estructura y al historial de la sesion.
	X Un input repetido del historial se vuelve a guardar.
	Si se superan HISTSIZE(variable de entorno para el tamaño del historial) lineas borrar la 1(en nuestra estructura, add_history lo hace automaticamente)
	Toda modificacion de HISTSIZE y HISTFILESIZE que no sea un numero positivo se trata como 0 con un limite de 100(por ejemplo)
	En caso de que HISTSIZE es 0, borramos el historial (rl_clear_history), pero mantenemos la estructura.
	X Al final de cada sesion sobreescribir el archivo del historial con lo que haya en la estructura en funcion del HISTSIZE


3-Aplicar el analisis lexico(no sabemos como se hace pero finjamos que si de momento)
	Lo primero splitear el input en tokens (excepto lo que haya entre comillas simples y dobles)
	Los tokens seran PIPE(|), OPEN(<), CLOSE(>), DOPEN(<<), DCLOSE(>>) o WORD(todo lo demas)
	Cargar la tabla de gramatica a un tipo de estructura
	NORMA IMPORTANTE --->Si el token no teminal generado en el estado anterior es el que marca como siguiente estado el default (el -1 en token type), volvemos al estado anterior<---
	En el primer paso evaluar el primer token del input, y avanzar al estado al que pida
	Cada vez que se aplica un default en un estado, volvemos al estado anterior
	Si el siguiente estado que marca una regla es un token no terminal (100 para arriba), al volver al estado anterior se va a ese token en concreto (en caso de que lo hubiera)
	En caso de que no lo hubiera, se evalua el siguiente token del input
	en caso de que no haya default y no se puede cumplir ninguna de las normas syntax error


	Ya tenemos una estructura con [comando][opciones + argumentos][stdin][stdout][stderror]//Bueno esto seria la parte del interprete

5-Expansion de variables
	Leer las variables que tenemos en enviroment en una estructura
	Vamos nodo por nodo viendo si tenemos un $(indicativo de llamada a variable de entorno)
	Hasta que no podamos expandir nada mas